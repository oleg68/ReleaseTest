name: Build

on:
  push:

jobs:
  calc_ver:
    # calculate versions from git tags
    runs-on: ubuntu-latest
    outputs:
      project_ver: ${{steps.vers.outputs.project_ver}}
      release_flag: ${{steps.vers.outputs.release_flag}}
      build_ver: ${{steps.vers.outputs.build_ver}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
         fetch-depth: 0

    - name: Calculate versions
      id: vers
      shell: bash
      run: |
        pwd
        GIT_VERSION=`git describe --tags`
        PROJECT_VERSION=`echo $GIT_VERSION | cut -d- -f1`
        BUILD_VERSION=`echo $GIT_VERSION | cut -d- -f2-3 | sed 's/-/./g'`
        RELEASE_FLAG=OFF
        if git describe --tags --exact-match && [[ ! "$BUILD_VERSION" < "1" ]]; then
          # rem Release
          RELEASE_FLAG=ON
        else
          # Intermediate build
          RELEASE_FLAG=OFF
          [[ -n $BUILD_VERSION ]] && BUILD_VERSION="${BUILD_VERSION}."
          BUILD_VERSION="${BUILD_VERSION}${{github.run_number}}"
        fi
        BUILD_VERSION="os.$BUILD_VERSION"
        echo "::set-output name=project_ver::$PROJECT_VERSION"
        echo "::set-output name=release_flag::$RELEASE_FLAG"
        echo "::set-output name=build_ver::$BUILD_VERSION"

    - name: Display versions
      run: |
        echo "project_ver=${{steps.vers.outputs.project_ver}}"
        echo "release_flag=${{steps.vers.outputs.release_flag}}"
        echo "build_ver=${{steps.vers.outputs.build_ver}}"
  
  build_linux:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    needs: [calc_ver]
    steps:

    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Build
      run: |
        cp File1.txt result-${{needs.calc_ver.outputs.project_ver}}-${{needs.calc_ver.outputs.build_ver}}.txt
        
    - name: Upload the artifact
      uses: actions/upload-artifact@v2
      with:
        name: result-${{needs.calc_ver.outputs.project_ver}}-${{needs.calc_ver.outputs.build_ver}}.txt
        path: result-${{needs.calc_ver.outputs.project_ver}}-${{needs.calc_ver.outputs.build_ver}}.txt

  release:
    needs: [calc_ver, build_linux]
    if: ${{ needs.calc_ver.outputs.project_ver == 'ON' }} 
    runs-on: ubuntu-latest
    steps:
      
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: result-${{needs.calc_ver.outputs.project_ver}}-${{needs.calc_ver.outputs.build_ver}}.txt

    - name: Create Draft Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{needs.calc_ver.outputs.project_ver}}-${{needs.calc_ver.outputs.build_ver}}
        release_name:  "Release Test ow v${{needs.calc_ver.outputs.project_ver}}-${{needs.calc_ver.outputs.build_ver}}"
        draft: true
        prerelease: false

    - uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: "result-${{needs.calc_ver.outputs.project_ver}}-${{needs.calc_ver.outputs.build_ver}}.txt"
        asset_name: "result-${{needs.calc_ver.outputs.project_ver}}-${{needs.calc_ver.outputs.build_ver}}.txt"
        asset_content_type: text/plain

    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}    
